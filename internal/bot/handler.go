package bot

import (
	"my-weather-bot/internal/location"
	"my-weather-bot/internal/weather"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type Handler struct {
	weatherService  *weather.Service
	locationService *location.Service
}

func NewHandler() *Handler {
	return &Handler{
		weatherService:  weather.NewService(),
		locationService: location.NewService(),
	}
}

func (h *Handler) HandleStart(bot *tgbotapi.BotAPI, chatID int64) {
	message := `üå§Ô∏è *–ë–æ—Ç-–º–µ—Ç–µ–æ—Ä–æ–ª–æ–≥*

–Ø –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –ø–æ–≥–æ–¥—É!

*–ö–æ–º–∞–Ω–¥—ã:*
/weather - –ø–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ
/city <–≥–æ—Ä–æ–¥> - –ø–æ–≥–æ–¥–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
/help - –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã

–ü—Ä–∏–º–µ—Ä: /city –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥`

	msg := tgbotapi.NewMessage(chatID, message)
	msg.ParseMode = "Markdown"
	bot.Send(msg)
}

func (h *Handler) HandleHelp(bot *tgbotapi.BotAPI, chatID int64) {
	message := `*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*

/weather - —Ç–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞ (–ú–æ—Å–∫–≤–∞)
/city <–≥–æ—Ä–æ–¥> - –ø–æ–≥–æ–¥–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

*–ü—Ä–∏–º–µ—Ä—ã:*
/city –õ–æ–Ω–¥–æ–Ω
/city –ü–∞—Ä–∏–∂
/city –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫`

	msg := tgbotapi.NewMessage(chatID, message)
	msg.ParseMode = "Markdown"
	bot.Send(msg)
}

func (h *Handler) HandleWeather(bot *tgbotapi.BotAPI, chatID int64) {
	// –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ú–æ—Å–∫–≤–∞
	lat, lon := 55.7558, 37.6173
	city := "–ú–æ—Å–∫–≤–µ"

	weatherData, err := h.weatherService.GetCurrentWeather(lat, lon)
	if err != nil {
		h.sendError(bot, chatID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã")
		return
	}

	message := h.weatherService.FormatCurrentWeather(weatherData, city)
	msg := tgbotapi.NewMessage(chatID, message)
	msg.ParseMode = "Markdown"
	bot.Send(msg)
}

func (h *Handler) HandleCityWeather(bot *tgbotapi.BotAPI, chatID int64, cityName string) {
	if cityName == "" {
		msg := tgbotapi.NewMessage(chatID, "–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥: `/city –ú–æ—Å–∫–≤–∞`")
		msg.ParseMode = "Markdown"
		bot.Send(msg)
		return
	}

	coords, err := h.locationService.GetCoordinates(cityName)
	if err != nil {
		h.sendError(bot, chatID, "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
		return
	}

	weatherData, err := h.weatherService.GetCurrentWeather(coords.Latitude, coords.Longitude)
	if err != nil {
		h.sendError(bot, chatID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã")
		return
	}

	message := h.weatherService.FormatCurrentWeather(weatherData, coords.Name)
	msg := tgbotapi.NewMessage(chatID, message)
	msg.ParseMode = "Markdown"
	bot.Send(msg)
}

func (h *Handler) sendError(bot *tgbotapi.BotAPI, chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, "‚ùå "+text)
	bot.Send(msg)
}
