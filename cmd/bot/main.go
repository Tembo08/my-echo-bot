package main

import (
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"strconv"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/joho/godotenv"
)

type WeatherResponse struct {
	Lat      float64         `json:"lat"`
	Lon      float64         `json:"lon"`
	Timezone string          `json:"timezone"`
	Daily    []DailyForecast `json:"daily"`
}

type DailyForecast struct {
	Dt   int64 `json:"dt"`
	Temp struct {
		Day   float64 `json:"day"`
		Night float64 `json:"night"`
	} `json:"temp"`
	Weather   []WeatherInfo `json:"weather"`
	Humidity  int           `json:"humidity"`
	WindSpeed float64       `json:"wind_speed"`
	Rain      float64       `json:"rain,omitempty"`
	Snow      float64       `json:"snow,omitempty"`
}

type WeatherInfo struct {
	Main        string `json:"main"`
	Description string `json:"description"`
	Icon        string `json:"icon"`
}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è IP-–≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
type IPGeoResponse struct {
	IP       string  `json:"ip"`
	City     string  `json:"city"`
	Region   string  `json:"region"`
	Country  string  `json:"country"`
	Loc      string  `json:"loc"`
	Lat      float64 `json:"lat,omitempty"`
	Lon      float64 `json:"lon,omitempty"`
	Timezone string  `json:"timezone"`
}

type GeoCodingResponse struct {
	Name    string  `json:"name"`
	Lat     float64 `json:"lat"`
	Lon     float64 `json:"lon"`
	Country string  `json:"country"`
	State   string  `json:"state"`
}

func main() {

	// –ó–∞–≥—Ä—É–∂–∞–µ–º env.
	err := godotenv.Load()
	if err != nil {
		log.Panicln("Warning: env.file not found")
	}

	token := os.Getenv("BOT_TOKEN")
	if token == "" {
		log.Fatal("TG_BOT_TOKEN not set")
	}

	// —Å–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		log.Panic(err)
	}

	bot.Debug = true

	log.Printf("Authorized on account %s", bot.Self.UserName)
	log.Printf("Bot is starting...")

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–∞–Ω–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	// –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç –¢–µ–ª–µ–≥–∏
	updates := bot.GetUpdatesChan(u)

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
	for update := range updates {
		if update.Message == nil {
			continue
		}

		if update.Message.IsCommand() {
			handleCommand(bot, update.Message)
			continue
		}

		//–ï—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–º–æ—â—å
		msg := tgbotapi.NewMessage(update.Message.Chat.ID,
			"üå§Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π /weather –¥–ª—è –ø–æ–≥–æ–¥—ã –≤ —Ç–≤–æ—ë–º –≥–æ—Ä–æ–¥–µ\n/help - –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã")
		bot.Send(msg)

	}
}

func handleCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	command := message.Command()
	args := strings.TrimSpace(message.CommandArguments())

	switch command {
	case "start":
		sendWelcome(bot, message.Chat.ID)
	case "help":
		sendHelp(bot, message.Chat.ID)
	case "weather", "–ø–æ–≥–æ–¥–∞":
		getWeatherByLocation(bot, message)
	case "–≥–æ—Ä–æ–¥", "city":
		if args == "" {
			msg := tgbotapi.NewMessage(message.Chat.ID,
				"–£–∫–∞–∂–∏ –≥–æ—Ä–æ–¥: /–≥–æ—Ä–æ–¥ –ú–æ—Å–∫–≤–∞")
			bot.Send(msg)
			return
		}

		getWeatherByCity(bot, message.Chat.ID, args)

	default:
		msg := tgbotapi.NewMessage(message.Chat.ID,
			"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ò—Å–ø–æ–ª–∑—É–π /help")
		bot.Send(msg)
	}

}

func sendWelcome(bot *tgbotapi.BotAPI, chatID int64) {

	welcomeText := `üå§Ô∏è *–ë–æ—Ç-–º–µ—Ç–µ–æ—Ä–æ–ª–æ–≥*

	–Ø –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ –Ω–µ–¥–µ–ª—é!

	*–ö–æ–º–∞–Ω–¥—ã:*
/–ø–æ–≥–æ–¥–∞ - –ø–æ–≥–æ–¥–∞ –≤ —Ç–≤–æ—ë–º –≥–æ—Ä–æ–¥–µ (–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
/–≥–æ—Ä–æ–¥ –ú–æ—Å–∫–≤–∞ - –ø–æ–≥–æ–¥–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
/help - –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã

–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ /–ø–æ–≥–æ–¥–∞ –∏ —è –ø–æ–∫–∞–∂—É –ø–æ–≥–æ–¥—É —Ç–∞–º, –≥–¥–µ —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è!`

	msg := tgbotapi.NewMessage(chatID, welcomeText)
	msg.ParseMode = "Markdown"
	bot.Send(msg)

}

func sendHelp(bot *tgbotapi.BotAPI, chatID int64) {
	helpText := `üå§Ô∏è *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*

/weather - –ø–æ–≥–æ–¥–∞ –≤ —Ç–≤–æ—ë–º –≥–æ—Ä–æ–¥–µ (–∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ)
/–ø–æ–≥–æ–¥–∞ - —Ç–æ –∂–µ —Å–∞–º–æ–µ
/city –ú–æ—Å–∫–≤–∞ - –ø–æ–≥–æ–¥–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

*–ü—Ä–∏–º–µ—Ä—ã:*
/weather - –ø–æ–≥–æ–¥–∞ —Ç–∞–º –≥–¥–µ —Ç—ã –µ—Å—Ç—å
/city London - –ø–æ–≥–æ–¥–∞ –≤ –õ–æ–Ω–¥–æ–Ω–µ
/city –ë–µ—Ä–ª–∏–Ω - –ø–æ–≥–æ–¥–∞ –≤ –ë–µ—Ä–ª–∏–Ω–µ`

	msg := tgbotapi.NewMessage(chatID, helpText)
	msg.ParseMode = "Markdown"
	bot.Send(msg)
}

func getWeatherByLocation(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	chatID := message.Chat.ID

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ..."
	msg := tgbotapi.NewMessage(chatID, "üìç –û–ø—Ä–µ–¥–µ–ª—è—é —Ç–≤–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ...")
	bot.Send(msg)

	// –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ IP
	location, err := getLocationByIP()
	if err != nil {
		log.Printf("Location error: %v", err)
		msg := tgbotapi.NewMessage(chatID,
			"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π /city –ì–æ—Ä–æ–¥")
		bot.Send(msg)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã
	weather, err := getWeatherForecast(location.Lat, location.Lon)
	if err != nil {
		log.Printf("Weather API error: %v", err)
		msg := tgbotapi.NewMessage(chatID,
			"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
		bot.Send(msg)
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç–≤–µ—Ç
	cityName := fmt.Sprintf("%s, %s", location.City, location.Country)
	response := formatWeatherResponse(cityName, weather, true)
	msg = tgbotapi.NewMessage(chatID, response)
	msg.ParseMode = "Markdown"
	bot.Send(msg)
}

func getWeatherByCity(bot *tgbotapi.BotAPI, chatID int64, city string) {
	msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("üîç –ò—â—É –ø–æ–≥–æ–¥—É –¥–ª—è: %s", city))
	bot.Send(msg)

	// –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞
	coords, err := getCityCoordinates(city)
	if err != nil {
		log.Printf("Geocoding error: %v", err)
		msg := tgbotapi.NewMessage(chatID,
			"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ–¥. –ü—Ä–æ–≤–µ—Ä—å –Ω–∞–∑–≤–∞–Ω–∏–µ.")
		bot.Send(msg)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã
	weather, err := getWeatherForecast(coords.Lat, coords.Lon)
	if err != nil {
		log.Printf("Weather API error: %v", err)
		msg := tgbotapi.NewMessage(chatID,
			"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
		bot.Send(msg)
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
	cityName := fmt.Sprintf("%s, %s", coords.Name, coords.Country)
	response := formatWeatherResponse(cityName, weather, false)
	msg = tgbotapi.NewMessage(chatID, response)
	msg.ParseMode = "Markdown"
	bot.Send(msg)
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ IP
func getLocationByIP() (*IPGeoResponse, error) {
	resp, err := http.Get("http://ipinfo.io/json")
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}

	var location IPGeoResponse
	err = json.Unmarshal(body, &location)
	if err != nil {
		return nil, err
	}

	// –ü–∞—Ä—Å–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ "lat,lon"
	if location.Loc != "" {
		parts := strings.Split(location.Loc, ",")
		if len(parts) == 2 {
			location.Lat, _ = strconv.ParseFloat(parts[0], 64)
			location.Lon, _ = strconv.ParseFloat(parts[1], 64)
		}
	}

	return &location, nil
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≥–æ—Ä–æ–¥–∞
func getCityCoordinates(city string) (*GeoCodingResponse, error) {
	apiKey := os.Getenv("OPENWEATHER_API_KEY")
	if apiKey == "" {
		return nil, fmt.Errorf("OPENWEATHER_API_KEY not set")
	}

	url := fmt.Sprintf("http://api.openweathermap.org/geo/1.0/direct?q=%s&limit=1&appid=%s", city, apiKey)
	resp, err := http.Get(url)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}

	var geocode GeoCodingResponse
	err = json.Unmarshal(body, &geocode)
	if err != nil {
		return nil, err
	}

	if len(geocode) == 0 {
		return nil, fmt.Errorf("–≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
	}

	return &geocode, nil
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã
func getWeatherForecast(lat, lon float64) (*WeatherResponse, error) {
	apiKey := os.Getenv("OPENWEATHER_API_KEY")
	if apiKey == "" {
		return nil, fmt.Errorf("OPENWEATHER_API_KEY not set")
	}

	url := fmt.Sprintf("https://api.openweathermap.org/data/2.5/onecall?lat=%f&lon=%f&exclude=current,minutely,hourly,alerts&appid=%s&units=metric&lang=ru", lat, lon, apiKey)
	resp, err := http.Get(url)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}

	var weather WeatherResponse
	err = json.Unmarshal(body, &weather)
	if err != nil {
		return nil, err
	}

	return &weather, nil
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å –ø–æ–≥–æ–¥–æ–π
func formatWeatherResponse(cityName string, weather *WeatherResponse, isCurrentLocation bool) string {
	var builder strings.Builder

	locationType := "üìç"
	if !isCurrentLocation {
		locationType = "üèôÔ∏è"
	}

	builder.WriteString(fmt.Sprintf("%s *%s*\n\n", locationType, cityName))
	builder.WriteString("*–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ–¥–µ–ª—é:*\n\n")

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π
	for i := 0; i < 5 && i < len(weather.Daily); i++ {
		day := weather.Daily[i]
		date := time.Unix(day.Dt, 0)
		weekday := getRussianWeekday(date.Weekday())

		// –≠–º–æ–¥–∑–∏ –¥–ª—è –ø–æ–≥–æ–¥—ã
		weatherEmoji := getWeatherEmoji(day.Weather[0].Main, day.Weather[0].Description)

		builder.WriteString(fmt.Sprintf("*%s, %s* %s\n", weekday, date.Format("02.01"), weatherEmoji))
		builder.WriteString(fmt.Sprintf("   üå°Ô∏è %.1f¬∞C (–Ω–æ—á—å—é %.1f¬∞C)\n", day.Temp.Day, day.Temp.Night))
		builder.WriteString(fmt.Sprintf("   üí® %.1f –º/—Å\n", day.WindSpeed))
		builder.WriteString(fmt.Sprintf("   üíß %d%%\n", day.Humidity))

		if day.Rain > 0 {
			builder.WriteString(fmt.Sprintf("   üåßÔ∏è %.1f –º–º\n", day.Rain))
		}
		if day.Snow > 0 {
			builder.WriteString(fmt.Sprintf("   ‚ùÑÔ∏è %.1f –º–º\n", day.Snow))
		}

		builder.WriteString("\n")
	}

	return builder.String()
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–Ω—è –Ω–µ–¥–µ–ª–∏
func getRussianWeekday(weekday time.Weekday) string {
	days := map[time.Weekday]string{
		time.Monday:    "–ü–Ω",
		time.Tuesday:   "–í—Ç",
		time.Wednesday: "–°—Ä",
		time.Thursday:  "–ß—Ç",
		time.Friday:    "–ü—Ç",
		time.Saturday:  "–°–±",
		time.Sunday:    "–í—Å",
	}
	return days[weekday]
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–∞ –ø–æ–≥–æ–¥—ã
func getWeatherEmoji(main, description string) string {
	switch main {
	case "Clear":
		return "‚òÄÔ∏è"
	case "Clouds":
		if strings.Contains(description, "few") || strings.Contains(description, "scattered") {
			return "‚õÖ"
		}
		return "‚òÅÔ∏è"
	case "Rain":
		if strings.Contains(description, "light") {
			return "üå¶Ô∏è"
		}
		return "üåßÔ∏è"
	case "Drizzle":
		return "üå¶Ô∏è"
	case "Thunderstorm":
		return "‚õàÔ∏è"
	case "Snow":
		return "‚ùÑÔ∏è"
	case "Mist", "Fog", "Haze":
		return "üå´Ô∏è"
	default:
		return "üå§Ô∏è"
	}
}
